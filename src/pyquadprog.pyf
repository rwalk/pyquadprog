!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module pyquadprog ! in 
    interface  ! in :pyquadprog
        subroutine aind(ind,m,q,n,ok) ! in :pyquadprog:aind.f
            integer dimension(m,*), intent(in):: ind
            integer, intent(hide), check(shape(ind,0)==m), depend(m) :: m=shape(ind,0)
            integer, intent(in) :: q
            integer, intent(in) :: n
            logical, intent(out) :: ok
        end subroutine aind
        
        subroutine achck(sol,n,amat,aind,bvec,m,q,meq,prec,ok) ! in :pyquadprog:achck.f
            double precision dimension(*), intent(inplace) :: sol
            integer, intent(in) :: n
            double precision dimension(m,*), intent(inplace) :: amat
            integer dimension(m + 1,*),depend(m), intent(inplace) :: aind
            double precision dimension(*) :: bvec
            integer, optional,check(shape(amat,0)==m),depend(amat), intent(inplace) :: m=shape(amat,0)
            integer, intent(in) :: q
            integer, intent(in) :: meq
            double precision, intent(in) :: prec
            logical, intent(out) :: ok
        end subroutine achck
        
        subroutine qpgen1(dmat,dvec,fddmat,n,sol,crval,amat,iamat,bvec,fdamat,q,meq,iact,nact,iter,work,ierr) ! in :pyquadprog:solve.QP.compact.f
            fortranname qpgen1
            double precision dimension(*,*),intent(in) :: dmat
            double precision dimension(n),intent(in) :: dvec
            integer, intent(hide),check(shape(dmat,0)==fddmat),depend(dmat) :: fddmat=shape(dmat,0)
            integer, intent(hide) :: n=shape(dmat,0)
            double precision dimension(n), intent(out) :: sol
            double precision, intent(out) :: crval
            double precision dimension(*,*), intent(in) :: amat
            integer dimension(*,*),depend(fdamat), intent(in) :: iamat
            double precision dimension(q), intent(in) :: bvec
            integer, intent(hide), check(shape(amat,0)==fdamat), depend(amat) :: fdamat=shape(amat,0)
            integer, intent(hide) :: q=shape(amat,1)
            integer, intent(in) :: meq
            integer dimension(q), intent(out) :: iact
            integer, intent(out) :: nact
            integer dimension(2), intent(out) :: iter
            double precision dimension(floor((2*n+min(n,q)*(min(n,q)+5.0)/2+2*q+1))), intent(out) :: work
            integer, intent(inout) :: ierr
        end subroutine qpgen1
        
        subroutine qpgen1_inplace(dmat,dvec,fddmat,n,sol,crval,amat,iamat,bvec,fdamat,q,meq,iact,nact,iter,work,ierr) ! in :pyquadprog:solve.QP.compact.f
            fortranname qpgen1
            double precision dimension(fddmat,*),intent(inplace) :: dmat
            double precision dimension(*),intent(inplace) :: dvec
            integer, optional,check(shape(dmat,0)==fddmat),depend(dmat),intent(in) :: fddmat=shape(dmat,0)
            integer, intent(in) :: n
            double precision dimension(*), intent(out) :: sol
            double precision, intent(out) :: crval
            double precision dimension(fdamat,*), intent(inplace) :: amat
            integer dimension(fdamat + 1,*),depend(fdamat), intent(inplace) :: iamat
            double precision dimension(*), intent(inplace) :: bvec
            integer, optional,check(shape(amat,0)==fdamat),depend(amat), intent(inplace) :: fdamat=shape(amat,0)
            integer, intent(hide) :: q=shape(bvec,0)
            integer, intent(in) :: meq
            integer dimension(*), intent(out) :: iact
            integer, intent(out) :: nact
            integer dimension(*), intent(out) :: iter
            double precision dimension(*), intent(out) :: work
            integer, intent(inout) :: ierr
        end subroutine qpgen1_inplace        
        
        subroutine qpgen2(dmat,dvec,fddmat,n,sol,crval,amat,bvec,fdamat,q,meq,iact,nact,iter,work,ierr) ! in :pyquadprog:solve.QP.f
            fortranname qpgen2
            double precision dimension(fddmat,*), intent(inplace) :: dmat
            double precision dimension(*), intent(inplace) :: dvec
            integer, optional,check(shape(dmat,0)==fddmat),depend(dmat), intent(hide) :: fddmat=shape(dmat,0)
            integer, intent(hide) :: n=shape(dmat,0)
            double precision dimension(n), intent(out) :: sol
            double precision, intent(out) :: crval
            double precision dimension(fdamat,*), intent(inplace) :: amat
            double precision dimension(*), intent(inplace) :: bvec
            integer, optional,check(shape(amat,0)==fdamat),depend(amat), intent(hide) :: fdamat=shape(amat,0)
            integer, intent(hide) :: q=shape(bvec,0)
            integer, intent(in) :: meq
            integer dimension(q), intent(out) :: iact
            integer, intent(out) :: nact
            integer dimension(2), intent(out) :: iter
            double precision dimension(floor((2*n+min(n,q)*(min(n,q)+5.0)/2+2*q+1))), intent(out) :: work
            integer, intent(inout) :: ierr
        end subroutine qpgen2
        
        subroutine qpgen2_inplace(dmat,dvec,fddmat,n,sol,crval,amat,bvec,fdamat,q,meq,iact,nact,iter,work,ierr) ! in :pyquadprog:solve.QP.f
            fortranname qpgen2
            double precision dimension(fddmat,*), intent(inout) :: dmat
            double precision dimension(*), intent(inplace) :: dvec
            integer, optional,check(shape(dmat,0)==fddmat),depend(dmat), intent(hide) :: fddmat=shape(dmat,0)
            integer, intent(hide) :: n=shape(dmat,0)
            double precision dimension(n), intent(out) :: sol
            double precision, intent(out) :: crval
            double precision dimension(fdamat,*), intent(inplace) :: amat
            double precision dimension(*), intent(inplace) :: bvec
            integer, optional,check(shape(amat,0)==fdamat),depend(amat), intent(hide) :: fdamat=shape(amat,0)
            integer, intent(hide) :: q = shape(bvec,0)
            integer, intent(in) :: meq
            integer dimension(q), intent(out) :: iact
            integer, intent(out) :: nact
            integer dimension(2), intent(out) :: iter
            double precision dimension(floor((2*n+min(n,q)*(min(n,q)+5.0)/2+2*q+1))), intent(out) :: work
            integer, intent(inout) :: ierr
        end subroutine qpgen2_inplace
    end interface
end python module pyquadprog

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
